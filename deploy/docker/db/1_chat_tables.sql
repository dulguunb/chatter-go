-- migrate:up

CREATE DATABASE chatter_db;
-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table
CREATE TABLE users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uuid UUID NOT NULL UNIQUE DEFAULT gen_random_uuid(),
    username VARCHAR(255) NOT NULL UNIQUE,
    display_name VARCHAR(255),
    avatar_url TEXT,
    available BOOLEAN DEFAULT true
);

-- Conversations table
CREATE TABLE conversations (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uuid UUID NOT NULL UNIQUE,
    name VARCHAR(255),
    last_message_uuid UUID
);

-- Messages table
CREATE TABLE messages (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uuid UUID NOT NULL UNIQUE DEFAULT gen_random_uuid(),
    conversation_uuid UUID NOT NULL,
    sender_uuid UUID NOT NULL,
    content TEXT NOT NULL,
    timestamp BIGINT NOT NULL, -- Unix epoch in milliseconds
    username VARCHAR(255) NOT NULL, -- Denormalized for performance
    FOREIGN KEY (conversation_uuid) REFERENCES conversations(uuid) ON DELETE CASCADE,
    FOREIGN KEY (sender_uuid) REFERENCES users(uuid) ON DELETE CASCADE
);

-- Junction table for conversation participants (many-to-many relationship)
CREATE TABLE conversation_participants (
    conversation_uuid UUID NOT NULL,
    user_uuid UUID NOT NULL,
    PRIMARY KEY (conversation_uuid, user_uuid),
    FOREIGN KEY (conversation_uuid) REFERENCES conversations(uuid) ON DELETE CASCADE,
    FOREIGN KEY (user_uuid) REFERENCES users(uuid) ON DELETE CASCADE
);

-- Public keys table for encryption
CREATE TABLE public_keys (
    participant_id INTEGER PRIMARY KEY,
    public_key TEXT NOT NULL,
    FOREIGN KEY (participant_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Add foreign key constraint for last_message_id
ALTER TABLE conversations 
ADD CONSTRAINT fk_conversations_last_message 
FOREIGN KEY (last_message_id) REFERENCES messages(id) ON DELETE SET NULL;

-- Indexes for performance
CREATE INDEX idx_conversation_participants_user_uuid ON conversation_participants(user_uuid);
CREATE INDEX idx_messages_conversation_uuid ON messages(conversation_uuid);
CREATE INDEX idx_messages_sender_uuid ON messages(sender_uuid);
CREATE INDEX idx_messages_timestamp ON messages(timestamp);
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_public_keys_participant_id ON public_keys(participant_id);


CREATE OR REPLACE FUNCTION add_public_key_to_user (uuid_in UUID, public_key_in TEXT) RETURNS INTEGER
AS
$$
DECLARE
participant_id_in INTEGER;
BEGIN
	SELECT id INTO participant_id_in FROM users where uuid = uuid_in;
	INSERT INTO public_keys (participant_id,public_key) VALUES (participant_id_in,public_key_in);
	RETURN participant_id_in;
END;
$$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION get_public_key (uuid_in UUID) RETURNS TEXT
AS
$$
DECLARE
participant_id_in INTEGER;
public_key_out TEXT;
BEGIN
	SELECT id INTO participant_id_in FROM users where uuid = uuid_in;
	SELECT public_key INTO public_key_out FROM public_keys WHERE participant_id = participant_id_in;
	RETURN public_key_out;
END;
$$
LANGUAGE 'plpgsql';

